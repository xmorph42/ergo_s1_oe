/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// copy this block to https://nickcoutsos.github.io/keymap-editor/ for visualization/modification

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer Tap
// The "layer-tap" behavior enables a layer when a key is held, and outputs a keypress when the key
// is only tapped for a short time.

&lt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
    quick-tap-ms = <50>;
};

// -- Change mouse behavior -----------------------------------------------------------------------

// -- Mouse movements
&mmv {
    time-to-max-speed-ms = <400>;   // How long time until max speed is reached (default: 500)
};

#define U_MOUSE_MOVE_MAX 1400    // New max speed setting (default: ZMK_MOUSE_DEFAULT_MOVE_VAL 600)
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP    MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN  MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT  MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

// -- Mouse scroll
#if 0 // when whe want to override ...
#define U_MOUSE_SCROLL_MAX 10   // New max speed setting (default: 10)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

&msc {
    time-to-max-speed-ms = <300>;   // How long time until max speed is reached (default: 300)
};
#endif

// ------------------------------------------------------------------------------------------------

/ {
    behaviors {
        // homerow mods (gqt: global-quick-tap)

        hm: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row-mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <50>;
            flavor = "tap-preferred";
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        lst: lst {
            compatible = "zmk,behavior-hold-tap";
            label = "left-shift-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;

            // 20231229 seem to not work with mouse-ftc branch of ftc/zmk    require-prior-idle-ms = <125>;

            hold-trigger-key-positions = <18 46 7 6 8 9 10 11 23 35 51 22 34 50 65 64 63 62 47 48 49 33 32 31 30 19 20 21 67 59 44 45 60 60 61 66 58 43 42 57 56>;
        };

        rst: rst {
            compatible = "zmk,behavior-hold-tap";
            label = "right-shift-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <56 57 43 42 58 66 44 59 67 60 61 45 0 24 12 36 1 13 25 37 52 38 26 14 2 3 15 27 39 54 53 55 40 28 16 4 5 17 29 41>;
        };
    };

    /* activate NAVIGATION layer when and only when LOWER + RAISE are pressed */

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // PBU Notes: map right ALT to LALT on default layer to not use it as ALTGR

        default_layer {
            bindings = <
&kp GRAVE       &kp N1      &kp N2      &kp N3       &kp N4        &kp N5                                                &kp N6      &kp N7        &kp N8       &kp N9      &kp N0      &kp MINUS
&kp TAB         &kp Q       &kp W       &kp F        &kp P         &kp B                                                 &kp J       &kp L         &kp U        &kp Y       &kp SEMI    &kp BSPC
&hm LSHIFT ESC  &hm LGUI A  &hm LALT R  &hm LCTRL S  &lst LSHFT T  &kp G                                                 &kp M       &rst RSHFT N  &hm RCTRL E  &hm LALT I  &hm RGUI O  &hm RSHFT SQT
&mo 4           &kp Z       &kp X       &kp C        &kp D         &kp V      &kp LCTRL  &kp LALT  &kp CAPS   &kp RCTRL  &kp K       &kp H         &kp COMMA    &kp PERIOD  &kp SLASH   &lt 4 ENTER
                &kp GRAVE   &kp BSLH    &kp LEFT     &kp RIGHT     &lt 1 ESC  &kp ENTER  &kp HOME  &kp PG_UP  &kp SPACE  &lt 2 BSPC  &kp UP        &kp DOWN     &kp LBKT    &kp RBKT
                                                                                         &kp END   &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&bt BT_CLR  &kp F1     &kp F2     &kp F3    &kp F4    &kp F5                                     &kp F6     &kp F7    &kp F8    &kp F9     &kp F10   &kp F11
&none       &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                                     &kp N6     &kp N7    &kp N8    &kp N9     &kp N0    &kp F12
&kp TILDE   &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                                  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR  &kp PIPE
&caps_word  &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &bt BT_NXT  &trans  &trans  &trans  &kp LBKT   &kp RBKT  &kp SEMI  &kp COLON  &kp BSLH  &kp RSHFT
            &trans     &trans     &trans    &trans    &trans     &trans      &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans
                                                                             &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp C_PREV  &kp K_PP   &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP                                  &trans    &trans        &trans  &kp PSCRN      &kp SLCK  &kp PAUSE_BREAK
&trans  &kp INS     &kp PSCRN  &kp K_APP   &trans        &trans                                        &trans    &kp LC(LEFT)  &trans  &kp LC(RIGHT)  &trans    &kp BSPC
&trans  &trans      &trans     &trans      &trans        &kp CAPS                                      &kp LEFT  &kp DOWN      &kp UP  &kp RIGHT      &kp DEL   &kp PG_UP
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE   &trans        &trans  &trans  &trans  &trans  &trans    &kp HOME      &trans  &kp END        &trans    &kp PG_DN
        &trans      &trans     &trans      &trans        &trans        &trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans         &trans
                                                                               &trans  &trans
            >;
        };

        navigation_layer {
            bindings = <
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &trans          &trans          &trans            &trans           &trans          &trans
&bt BT_CLR      &trans        &trans        &trans        &trans        &trans                                  &msc SCRL_UP    &mkp LCLK       &mkp MCLK         &mkp RCLK        &msc SCRL_LEFT  &trans
&bt BT_NXT      &trans        &trans        &trans        &trans        &trans                                  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP      &mmv MOVE_RIGHT  &trans          &trans
&bt BT_PRV      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &msc SCRL_DOWN  &kp C_PREV      &kp C_PLAY_PAUSE  &kp C_NEXT       &msc SCRL_RIGHT &trans
                &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans            &trans           &trans
                                                                                        &trans  &trans
            >;
        };

        locale_layer {
            bindings = <
&trans  &trans     &trans  &trans     &trans  &trans                                  &trans  &trans  &trans      &trans    &trans     &trans
&trans  &trans     &trans  &trans     &trans  &trans                                  &trans  &trans  &kp RA(Y)   &trans    &trans     &trans
&trans  &kp RA(Q)  &trans  &kp RA(S)  &trans  &trans                                  &trans  &trans  &kp RA(N5)  &kp RALT  &kp RA(P)  &trans
&trans  &trans     &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans     &trans
        &trans     &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans
                                                              &trans  &trans
            >;
        };
    };
};

